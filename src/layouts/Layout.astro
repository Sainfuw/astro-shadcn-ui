---
import Nav from "@/components/Nav.astro";
import "@/styles/globals.css";

interface Props {
  title: string;
}

const { title } = Astro.props;
const currentPath = Astro.url.pathname.slice(1);
const componentList = [
  "Accordion",
  "Button",
  "Select",
  "AlertDialog",
  "Dialog",
  "Badge",
];
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <Nav />
    <main class="max-w-6xl m-auto flex">
      <ul class="min-w-48 flex flex-col gap-2">
        {
          componentList.map((comp) => (
            <li>
              <a
                href={comp}
                class={`capitalize ${currentPath === comp ? "font-bold" : ""}`}
              >
                {comp}
              </a>
            </li>
          ))
        }
      </ul>
      <div class="w-full">
        <slot />
      </div>
    </main>
  </body>
</html>

<script is:inline>
  const getThemePreference = () => {
    if (typeof localStorage !== "undefined" && localStorage.getItem("theme")) {
      return localStorage.getItem("theme");
    }
    return window.matchMedia("(prefers-color-scheme: dark)").matches
      ? "dark"
      : "light";
  };
  const isDark = getThemePreference() === "dark";
  document.documentElement.classList[isDark ? "add" : "remove"]("dark");

  if (typeof localStorage !== "undefined") {
    const observer = new MutationObserver(() => {
      const isDark = document.documentElement.classList.contains("dark");
      localStorage.setItem("theme", isDark ? "dark" : "light");
    });
    observer.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ["class"],
    });
  }
</script>
